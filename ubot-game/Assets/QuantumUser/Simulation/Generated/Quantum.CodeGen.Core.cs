// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  public enum EKCCCollisionSource : byte {
    None = 0,
    Entity = 1,
    Collider = 2,
  }
  public enum EKCCIgnoreSource : byte {
    None = 0,
    Entity = 1,
    Collider = 2,
  }
  public enum EKCCProcessorSource : byte {
    None = 0,
    Modifier = 1,
    StaticCollider = 2,
    EntityCollider = 3,
  }
  public enum TeamRef : int {
    Attacker = 0,
    Defender = 1,
  }
  [System.FlagsAttribute()]
  public enum InputButtons : int {
    Interact = 1 << 0,
    SecondInteract = 1 << 1,
    Jump = 1 << 2,
  }
  public static unsafe partial class FlagsExtensions {
    public static Boolean IsFlagSet(this InputButtons self, InputButtons flag) {
      return (self & flag) == flag;
    }
    public static InputButtons SetFlag(this InputButtons self, InputButtons flag) {
      return self | flag;
    }
    public static InputButtons ClearFlag(this InputButtons self, InputButtons flag) {
      return self & ~flag;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet128 {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[2];
    public const Int32 BitsSize = 128;
    public Int32 Length {
      get {
        return 128;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet128*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 128, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet128 FromArray(UInt64[] values) {
      Assert.Always(2 == values.Length, "Invalid array size", values.Length);
      BitSet128 result = default;
      for (int i = 0; i < 2; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 16);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Int32 GetSetCount() {
      fixed (UInt64* p = Bits) {
        int result = 0;
        result += Maths.CountSetBits(p[0]);
        result += Maths.CountSetBits(p[1]);
        return result;
      }
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsAnySet() {
      fixed (UInt64* p = Bits) {
        if (p[0] != 0) return true;
        if (p[1] != 0) return true;
        return false;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4463;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 2);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet128*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 2);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet2048 {
    public const Int32 SIZE = 256;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[32];
    public const Int32 BitsSize = 2048;
    public Int32 Length {
      get {
        return 2048;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet2048*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 2048, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet2048 FromArray(UInt64[] values) {
      Assert.Always(32 == values.Length, "Invalid array size", values.Length);
      BitSet2048 result = default;
      for (int i = 0; i < 32; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 256);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Int32 GetSetCount() {
      fixed (UInt64* p = Bits) {
        int result = 0;
        for (int i = 0; i < 32; ++i) {
          result += Maths.CountSetBits(p[i]);
        }
        return result;
      }
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsAnySet() {
      fixed (UInt64* p = Bits) {
        for (int i = 0; i < 32; ++i) {
          if (p[i] != 0) return true;
        }
        return false;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3319;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 32);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet2048*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet256 {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[4];
    public const Int32 BitsSize = 256;
    public Int32 Length {
      get {
        return 256;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet256*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 256, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet256 FromArray(UInt64[] values) {
      Assert.Always(4 == values.Length, "Invalid array size", values.Length);
      BitSet256 result = default;
      for (int i = 0; i < 4; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 32);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Int32 GetSetCount() {
      fixed (UInt64* p = Bits) {
        int result = 0;
        result += Maths.CountSetBits(p[0]);
        result += Maths.CountSetBits(p[1]);
        result += Maths.CountSetBits(p[2]);
        result += Maths.CountSetBits(p[3]);
        return result;
      }
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsAnySet() {
      fixed (UInt64* p = Bits) {
        if (p[0] != 0) return true;
        if (p[1] != 0) return true;
        if (p[2] != 0) return true;
        if (p[3] != 0) return true;
        return false;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14057;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 4);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet256*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 4);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet4096 {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[64];
    public const Int32 BitsSize = 4096;
    public Int32 Length {
      get {
        return 4096;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet4096*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 4096, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet4096 FromArray(UInt64[] values) {
      Assert.Always(64 == values.Length, "Invalid array size", values.Length);
      BitSet4096 result = default;
      for (int i = 0; i < 64; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 512);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Int32 GetSetCount() {
      fixed (UInt64* p = Bits) {
        int result = 0;
        for (int i = 0; i < 64; ++i) {
          result += Maths.CountSetBits(p[i]);
        }
        return result;
      }
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsAnySet() {
      fixed (UInt64* p = Bits) {
        for (int i = 0; i < 64; ++i) {
          if (p[i] != 0) return true;
        }
        return false;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 1433;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 64);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet4096*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 64);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet512 {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[8];
    public const Int32 BitsSize = 512;
    public Int32 Length {
      get {
        return 512;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet512*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 512, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet512 FromArray(UInt64[] values) {
      Assert.Always(8 == values.Length, "Invalid array size", values.Length);
      BitSet512 result = default;
      for (int i = 0; i < 8; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 64);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Int32 GetSetCount() {
      fixed (UInt64* p = Bits) {
        int result = 0;
        for (int i = 0; i < 8; ++i) {
          result += Maths.CountSetBits(p[i]);
        }
        return result;
      }
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsAnySet() {
      fixed (UInt64* p = Bits) {
        for (int i = 0; i < 8; ++i) {
          if (p[i] != 0) return true;
        }
        return false;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17491;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 8);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet512*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 8);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet6 {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[1];
    public const Int32 BitsSize = 6;
    public Int32 Length {
      get {
        return 6;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet6*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 6, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet6 FromArray(UInt64[] values) {
      Assert.Always(1 == values.Length, "Invalid array size", values.Length);
      BitSet6 result = default;
      for (int i = 0; i < 1; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 8);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Int32 GetSetCount() {
      fixed (UInt64* p = Bits) {
        int result = 0;
        result += Maths.CountSetBits(p[0] & 0x3FUL);
        return result;
      }
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsAnySet() {
      fixed (UInt64* p = Bits) {
        if ((p[0] & 0x3FUL) != 0) return true;
        return false;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 13669;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 1);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet6*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 1);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [ExcludeFromPrototype()]
  public unsafe partial struct BasePlayerInput {
    public const Int32 SIZE = 72;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(56)]
    public FPVector2 MoveDirection;
    [FieldOffset(40)]
    public FPVector2 LookRotationDelta;
    [FieldOffset(16)]
    public Button Jump;
    [FieldOffset(4)]
    public Button Interact;
    [FieldOffset(28)]
    public Button SecondInteract;
    [FieldOffset(0)]
    public Int32 TextInput;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 463;
        hash = hash * 31 + MoveDirection.GetHashCode();
        hash = hash * 31 + LookRotationDelta.GetHashCode();
        hash = hash * 31 + Jump.GetHashCode();
        hash = hash * 31 + Interact.GetHashCode();
        hash = hash * 31 + SecondInteract.GetHashCode();
        hash = hash * 31 + TextInput.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BasePlayerInput*)ptr;
        serializer.Stream.Serialize(&p->TextInput);
        Button.Serialize(&p->Interact, serializer);
        Button.Serialize(&p->Jump, serializer);
        Button.Serialize(&p->SecondInteract, serializer);
        FPVector2.Serialize(&p->LookRotationDelta, serializer);
        FPVector2.Serialize(&p->MoveDirection, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Input {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(4)]
    public Button Interact;
    [FieldOffset(28)]
    public Button SecondInteract;
    [FieldOffset(16)]
    public Button Jump;
    [FieldOffset(0)]
    public Int32 TextInput;
    [FieldOffset(40)]
    public QuantumThumbSticks ThumbSticks;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19249;
        hash = hash * 31 + Interact.GetHashCode();
        hash = hash * 31 + SecondInteract.GetHashCode();
        hash = hash * 31 + Jump.GetHashCode();
        hash = hash * 31 + TextInput.GetHashCode();
        hash = hash * 31 + ThumbSticks.GetHashCode();
        return hash;
      }
    }
    static partial void GetMaxCountCodeGen(ref int maxCount) {
      maxCount = 6;
    }
    public Boolean IsDown(InputButtons button) {
      switch (button) {
        case InputButtons.Interact: return Interact.IsDown;
        case InputButtons.SecondInteract: return SecondInteract.IsDown;
        case InputButtons.Jump: return Jump.IsDown;
        default: return false;
      }
    }
    public Boolean WasPressed(InputButtons button) {
      switch (button) {
        case InputButtons.Interact: return Interact.WasPressed;
        case InputButtons.SecondInteract: return SecondInteract.WasPressed;
        case InputButtons.Jump: return Jump.WasPressed;
        default: return false;
      }
    }
    static partial void SerializeCodeGen(void* ptr, FrameSerializer serializer) {
        var p = (Input*)ptr;
        serializer.Stream.Serialize(&p->TextInput);
        Button.Serialize(&p->Interact, serializer);
        Button.Serialize(&p->Jump, serializer);
        Button.Serialize(&p->SecondInteract, serializer);
        Quantum.QuantumThumbSticks.Serialize(&p->ThumbSticks, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct KCCCollision {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public EKCCCollisionSource Source;
    [FieldOffset(16)]
    public EntityRef Reference;
    [FieldOffset(8)]
    public AssetRef Processor;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7523;
        hash = hash * 31 + (Byte)Source;
        hash = hash * 31 + Reference.GetHashCode();
        hash = hash * 31 + Processor.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (KCCCollision*)ptr;
        serializer.Stream.Serialize((Byte*)&p->Source);
        AssetRef.Serialize(&p->Processor, serializer);
        EntityRef.Serialize(&p->Reference, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct KCCData {
    public const Int32 SIZE = 528;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public QBoolean IsActive;
    [FieldOffset(72)]
    public FP LookPitch;
    [FieldOffset(80)]
    public FP LookYaw;
    [FieldOffset(120)]
    public FPVector3 BasePosition;
    [FieldOffset(144)]
    public FPVector3 DesiredPosition;
    [FieldOffset(504)]
    public FPVector3 TargetPosition;
    [FieldOffset(40)]
    public FP DeltaTime;
    [FieldOffset(360)]
    public FPVector3 InputDirection;
    [FieldOffset(384)]
    public FPVector3 JumpImpulse;
    [FieldOffset(264)]
    public FPVector3 Gravity;
    [FieldOffset(88)]
    public FP MaxGroundAngle;
    [FieldOffset(104)]
    public FP MaxWallAngle;
    [FieldOffset(96)]
    public FP MaxHangAngle;
    [FieldOffset(240)]
    public FPVector3 ExternalImpulse;
    [FieldOffset(216)]
    public FPVector3 ExternalForce;
    [FieldOffset(192)]
    public FPVector3 ExternalDelta;
    [FieldOffset(64)]
    public FP KinematicSpeed;
    [FieldOffset(432)]
    public FPVector3 KinematicTangent;
    [FieldOffset(408)]
    public FPVector3 KinematicDirection;
    [FieldOffset(456)]
    public FPVector3 KinematicVelocity;
    [FieldOffset(168)]
    public FPVector3 DynamicVelocity;
    [FieldOffset(112)]
    public FP RealSpeed;
    [FieldOffset(480)]
    public FPVector3 RealVelocity;
    [FieldOffset(0)]
    public QBoolean HasJumped;
    [FieldOffset(4)]
    public QBoolean HasTeleported;
    [FieldOffset(12)]
    public QBoolean IsGrounded;
    [FieldOffset(24)]
    public QBoolean WasGrounded;
    [FieldOffset(20)]
    public QBoolean IsSteppingUp;
    [FieldOffset(32)]
    public QBoolean WasSteppingUp;
    [FieldOffset(16)]
    public QBoolean IsSnappingToGround;
    [FieldOffset(28)]
    public QBoolean WasSnappingToGround;
    [FieldOffset(288)]
    public FPVector3 GroundNormal;
    [FieldOffset(336)]
    public FPVector3 GroundTangent;
    [FieldOffset(312)]
    public FPVector3 GroundPosition;
    [FieldOffset(56)]
    public FP GroundDistance;
    [FieldOffset(48)]
    public FP GroundAngle;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6067;
        hash = hash * 31 + IsActive.GetHashCode();
        hash = hash * 31 + LookPitch.GetHashCode();
        hash = hash * 31 + LookYaw.GetHashCode();
        hash = hash * 31 + BasePosition.GetHashCode();
        hash = hash * 31 + DesiredPosition.GetHashCode();
        hash = hash * 31 + TargetPosition.GetHashCode();
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + InputDirection.GetHashCode();
        hash = hash * 31 + JumpImpulse.GetHashCode();
        hash = hash * 31 + Gravity.GetHashCode();
        hash = hash * 31 + MaxGroundAngle.GetHashCode();
        hash = hash * 31 + MaxWallAngle.GetHashCode();
        hash = hash * 31 + MaxHangAngle.GetHashCode();
        hash = hash * 31 + ExternalImpulse.GetHashCode();
        hash = hash * 31 + ExternalForce.GetHashCode();
        hash = hash * 31 + ExternalDelta.GetHashCode();
        hash = hash * 31 + KinematicSpeed.GetHashCode();
        hash = hash * 31 + KinematicTangent.GetHashCode();
        hash = hash * 31 + KinematicDirection.GetHashCode();
        hash = hash * 31 + KinematicVelocity.GetHashCode();
        hash = hash * 31 + DynamicVelocity.GetHashCode();
        hash = hash * 31 + RealSpeed.GetHashCode();
        hash = hash * 31 + RealVelocity.GetHashCode();
        hash = hash * 31 + HasJumped.GetHashCode();
        hash = hash * 31 + HasTeleported.GetHashCode();
        hash = hash * 31 + IsGrounded.GetHashCode();
        hash = hash * 31 + WasGrounded.GetHashCode();
        hash = hash * 31 + IsSteppingUp.GetHashCode();
        hash = hash * 31 + WasSteppingUp.GetHashCode();
        hash = hash * 31 + IsSnappingToGround.GetHashCode();
        hash = hash * 31 + WasSnappingToGround.GetHashCode();
        hash = hash * 31 + GroundNormal.GetHashCode();
        hash = hash * 31 + GroundTangent.GetHashCode();
        hash = hash * 31 + GroundPosition.GetHashCode();
        hash = hash * 31 + GroundDistance.GetHashCode();
        hash = hash * 31 + GroundAngle.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (KCCData*)ptr;
        QBoolean.Serialize(&p->HasJumped, serializer);
        QBoolean.Serialize(&p->HasTeleported, serializer);
        QBoolean.Serialize(&p->IsActive, serializer);
        QBoolean.Serialize(&p->IsGrounded, serializer);
        QBoolean.Serialize(&p->IsSnappingToGround, serializer);
        QBoolean.Serialize(&p->IsSteppingUp, serializer);
        QBoolean.Serialize(&p->WasGrounded, serializer);
        QBoolean.Serialize(&p->WasSnappingToGround, serializer);
        QBoolean.Serialize(&p->WasSteppingUp, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        FP.Serialize(&p->GroundAngle, serializer);
        FP.Serialize(&p->GroundDistance, serializer);
        FP.Serialize(&p->KinematicSpeed, serializer);
        FP.Serialize(&p->LookPitch, serializer);
        FP.Serialize(&p->LookYaw, serializer);
        FP.Serialize(&p->MaxGroundAngle, serializer);
        FP.Serialize(&p->MaxHangAngle, serializer);
        FP.Serialize(&p->MaxWallAngle, serializer);
        FP.Serialize(&p->RealSpeed, serializer);
        FPVector3.Serialize(&p->BasePosition, serializer);
        FPVector3.Serialize(&p->DesiredPosition, serializer);
        FPVector3.Serialize(&p->DynamicVelocity, serializer);
        FPVector3.Serialize(&p->ExternalDelta, serializer);
        FPVector3.Serialize(&p->ExternalForce, serializer);
        FPVector3.Serialize(&p->ExternalImpulse, serializer);
        FPVector3.Serialize(&p->Gravity, serializer);
        FPVector3.Serialize(&p->GroundNormal, serializer);
        FPVector3.Serialize(&p->GroundPosition, serializer);
        FPVector3.Serialize(&p->GroundTangent, serializer);
        FPVector3.Serialize(&p->InputDirection, serializer);
        FPVector3.Serialize(&p->JumpImpulse, serializer);
        FPVector3.Serialize(&p->KinematicDirection, serializer);
        FPVector3.Serialize(&p->KinematicTangent, serializer);
        FPVector3.Serialize(&p->KinematicVelocity, serializer);
        FPVector3.Serialize(&p->RealVelocity, serializer);
        FPVector3.Serialize(&p->TargetPosition, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct KCCIgnore {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public EKCCIgnoreSource Source;
    [FieldOffset(8)]
    public EntityRef Reference;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 283;
        hash = hash * 31 + (Byte)Source;
        hash = hash * 31 + Reference.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (KCCIgnore*)ptr;
        serializer.Stream.Serialize((Byte*)&p->Source);
        EntityRef.Serialize(&p->Reference, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct KCCModifier {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRef Processor;
    [FieldOffset(8)]
    public EntityRef Entity;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15959;
        hash = hash * 31 + Processor.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (KCCModifier*)ptr;
        AssetRef.Serialize(&p->Processor, serializer);
        EntityRef.Serialize(&p->Entity, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [ExcludeFromPrototype()]
  public unsafe partial struct QuantumHighresThumbSticks {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public InputDirectionMagnitude _leftThumb;
    [FieldOffset(8)]
    public InputPitchYaw _rightThumb;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 18181;
        hash = hash * 31 + _leftThumb.GetHashCode();
        hash = hash * 31 + _rightThumb.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QuantumHighresThumbSticks*)ptr;
        InputDirectionMagnitude.Serialize(&p->_leftThumb, serializer);
        InputPitchYaw.Serialize(&p->_rightThumb, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [ExcludeFromPrototype()]
  public unsafe partial struct QuantumRegularThumbSticks {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public InputDirectionMagnitude _leftThumb;
    [FieldOffset(4)]
    public InputDirectionMagnitude _rightThumb;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 2731;
        hash = hash * 31 + _leftThumb.GetHashCode();
        hash = hash * 31 + _rightThumb.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QuantumRegularThumbSticks*)ptr;
        InputDirectionMagnitude.Serialize(&p->_leftThumb, serializer);
        InputDirectionMagnitude.Serialize(&p->_rightThumb, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct _globals_ {
    public const Int32 SIZE = 1128;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRef<Map> Map;
    [FieldOffset(8)]
    public FP DeltaTime;
    [FieldOffset(16)]
    public NavMeshRegionMask NavMeshRegions;
    [FieldOffset(80)]
    public PhysicsEngineState PhysicsState2D;
    [FieldOffset(96)]
    public PhysicsEngineState PhysicsState3D;
    [FieldOffset(112)]
    public RNGSession RngSession;
    [FieldOffset(128)]
    public FrameMetaData FrameMetaData;
    [FieldOffset(176)]
    public BitSet1024 Systems;
    [FieldOffset(304)]
    public PhysicsSceneSettings PhysicsSettings;
    [FieldOffset(600)]
    public Int32 PlayerConnectedCount;
    [FieldOffset(608)]
    [FramePrinter.FixedArrayAttribute(typeof(Input), 6)]
    private fixed Byte _input_[384];
    [FieldOffset(992)]
    public BitSet6 PlayerLastConnectionState;
    [FieldOffset(1000)]
    public Transform3D AttackerSpawnPoint;
    [FieldOffset(1064)]
    public Transform3D DefenderSpawnPoint;
    public FixedArray<Input> input {
      get {
        fixed (byte* p = _input_) { return new FixedArray<Input>(p, 64, 6); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 12473;
        hash = hash * 31 + Map.GetHashCode();
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + NavMeshRegions.GetHashCode();
        hash = hash * 31 + PhysicsState2D.GetHashCode();
        hash = hash * 31 + PhysicsState3D.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + FrameMetaData.GetHashCode();
        hash = hash * 31 + Systems.GetHashCode();
        hash = hash * 31 + PhysicsSettings.GetHashCode();
        hash = hash * 31 + PlayerConnectedCount.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(input);
        hash = hash * 31 + PlayerLastConnectionState.GetHashCode();
        hash = hash * 31 + AttackerSpawnPoint.GetHashCode();
        hash = hash * 31 + DefenderSpawnPoint.GetHashCode();
        return hash;
      }
    }
    static partial void SerializeCodeGen(void* ptr, FrameSerializer serializer) {
        var p = (_globals_*)ptr;
        AssetRef.Serialize(&p->Map, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        NavMeshRegionMask.Serialize(&p->NavMeshRegions, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState2D, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState3D, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
        FrameMetaData.Serialize(&p->FrameMetaData, serializer);
        Quantum.BitSet1024.Serialize(&p->Systems, serializer);
        PhysicsSceneSettings.Serialize(&p->PhysicsSettings, serializer);
        serializer.Stream.Serialize(&p->PlayerConnectedCount);
        FixedArray.Serialize(p->input, serializer, Statics.SerializeInput);
        Quantum.BitSet6.Serialize(&p->PlayerLastConnectionState, serializer);
        Transform3D.Serialize(&p->AttackerSpawnPoint, serializer);
        Transform3D.Serialize(&p->DefenderSpawnPoint, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Union()]
  [ExcludeFromPrototype()]
  public unsafe partial struct QuantumThumbSticks {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private Int32 _field_used_;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.QuantumThumbSticks.REGULAR)]
    private QuantumRegularThumbSticks _Regular;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.QuantumThumbSticks.HIGHRES)]
    private QuantumHighresThumbSticks _HighRes;
    public const Int32 REGULAR = 1;
    public const Int32 HIGHRES = 2;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public QuantumRegularThumbSticks* Regular {
      get {
        fixed (QuantumRegularThumbSticks* p = &_Regular) {
          if (_field_used_ != REGULAR) {
            Native.Utils.Clear(p, 8);
            _field_used_ = REGULAR;
          }
          return p;
        }
      }
    }
    public QuantumHighresThumbSticks* HighRes {
      get {
        fixed (QuantumHighresThumbSticks* p = &_HighRes) {
          if (_field_used_ != HIGHRES) {
            Native.Utils.Clear(p, 16);
            _field_used_ = HIGHRES;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8867;
        hash = hash * 31 + _field_used_.GetHashCode();
        hash = hash * 31 + _Regular.GetHashCode();
        hash = hash * 31 + _HighRes.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QuantumThumbSticks*)ptr;
        if (serializer.InputMode) {
          serializer.Stream.SerializeBuffer((byte*)p, Quantum.QuantumThumbSticks.SIZE);
          return;
        }
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == HIGHRES) {
          Quantum.QuantumHighresThumbSticks.Serialize(&p->_HighRes, serializer);
        }
        if (p->_field_used_ == REGULAR) {
          Quantum.QuantumRegularThumbSticks.Serialize(&p->_Regular, serializer);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Carryable : Quantum.IComponent {
    public const Int32 SIZE = 56;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public EntityRef Player;
    [FieldOffset(8)]
    public FPVector3 PositionOffset;
    [FieldOffset(32)]
    public FPVector3 RotationOffset;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20129;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + PositionOffset.GetHashCode();
        hash = hash * 31 + RotationOffset.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Carryable*)ptr;
        EntityRef.Serialize(&p->Player, serializer);
        FPVector3.Serialize(&p->PositionOffset, serializer);
        FPVector3.Serialize(&p->RotationOffset, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Interactable : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 2039;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Interactable*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct KCC : Quantum.IComponent {
    public const Int32 SIZE = 560;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public AssetRef<KCCSettings> Settings;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public QBoolean IsInitialized;
    [FieldOffset(24)]
    [ExcludeFromPrototype()]
    public EntityRef Entity;
    [FieldOffset(32)]
    [ExcludeFromPrototype()]
    public KCCData Data;
    [FieldOffset(4)]
    [ExcludeFromPrototype()]
    public QHashSetPtr<KCCIgnore> Ignores;
    [FieldOffset(12)]
    [ExcludeFromPrototype()]
    public QListPtr<KCCModifier> Modifiers;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    public QListPtr<KCCCollision> Collisions;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 659;
        hash = hash * 31 + Settings.GetHashCode();
        hash = hash * 31 + IsInitialized.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Data.GetHashCode();
        hash = hash * 31 + Ignores.GetHashCode();
        hash = hash * 31 + Modifiers.GetHashCode();
        hash = hash * 31 + Collisions.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      Ignores = default;
      Modifiers = default;
      Collisions = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.KCC*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (KCC*)ptr;
        QBoolean.Serialize(&p->IsInitialized, serializer);
        QHashSet.Serialize(&p->Ignores, serializer, Statics.SerializeKCCIgnore);
        QList.Serialize(&p->Collisions, serializer, Statics.SerializeKCCCollision);
        QList.Serialize(&p->Modifiers, serializer, Statics.SerializeKCCModifier);
        AssetRef.Serialize(&p->Settings, serializer);
        EntityRef.Serialize(&p->Entity, serializer);
        Quantum.KCCData.Serialize(&p->Data, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct KCCProcessorLink : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRef<KCCProcessor> Processor;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 13411;
        hash = hash * 31 + Processor.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (KCCProcessorLink*)ptr;
        AssetRef.Serialize(&p->Processor, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Player : Quantum.IComponent {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(24)]
    public FP JumpForce;
    [FieldOffset(0)]
    [HideInInspector()]
    public PlayerRef PlayerRef;
    [FieldOffset(16)]
    public EntityRef CurrentlyCarrying;
    [FieldOffset(8)]
    public EntityRef CurrentStation;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 2621;
        hash = hash * 31 + JumpForce.GetHashCode();
        hash = hash * 31 + PlayerRef.GetHashCode();
        hash = hash * 31 + CurrentlyCarrying.GetHashCode();
        hash = hash * 31 + CurrentStation.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Player*)ptr;
        PlayerRef.Serialize(&p->PlayerRef, serializer);
        EntityRef.Serialize(&p->CurrentStation, serializer);
        EntityRef.Serialize(&p->CurrentlyCarrying, serializer);
        FP.Serialize(&p->JumpForce, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerFields : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public PlayerRef Owner;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 16901;
        hash = hash * 31 + Owner.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerFields*)ptr;
        PlayerRef.Serialize(&p->Owner, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Station : Quantum.IComponent {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public FPVector3 PlayerPosition;
    [FieldOffset(40)]
    public FPVector3 PlayerRotation;
    [FieldOffset(0)]
    public EntityRef Player;
    [FieldOffset(8)]
    public EntityRef Room;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4759;
        hash = hash * 31 + PlayerPosition.GetHashCode();
        hash = hash * 31 + PlayerRotation.GetHashCode();
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Room.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Station*)ptr;
        EntityRef.Serialize(&p->Player, serializer);
        EntityRef.Serialize(&p->Room, serializer);
        FPVector3.Serialize(&p->PlayerPosition, serializer);
        FPVector3.Serialize(&p->PlayerRotation, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct SteerStation : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Steering;
    [FieldOffset(8)]
    public FP SteeringSpeed;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15797;
        hash = hash * 31 + Steering.GetHashCode();
        hash = hash * 31 + SteeringSpeed.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (SteerStation*)ptr;
        FP.Serialize(&p->Steering, serializer);
        FP.Serialize(&p->SteeringSpeed, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Submarine : Quantum.IComponent {
    public const Int32 SIZE = 48;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [Header("Stats")]
    public FP Acceleration;
    [FieldOffset(40)]
    public FP TurnSpeed;
    [FieldOffset(16)]
    [ExcludeFromPrototype()]
    public FP Steering;
    [FieldOffset(32)]
    [ExcludeFromPrototype()]
    public FP Throttle;
    [FieldOffset(24)]
    [ExcludeFromPrototype()]
    public FP TargetDepth;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public QBoolean HasLoadedTorpedo;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19183;
        hash = hash * 31 + Acceleration.GetHashCode();
        hash = hash * 31 + TurnSpeed.GetHashCode();
        hash = hash * 31 + Steering.GetHashCode();
        hash = hash * 31 + Throttle.GetHashCode();
        hash = hash * 31 + TargetDepth.GetHashCode();
        hash = hash * 31 + HasLoadedTorpedo.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Submarine*)ptr;
        QBoolean.Serialize(&p->HasLoadedTorpedo, serializer);
        FP.Serialize(&p->Acceleration, serializer);
        FP.Serialize(&p->Steering, serializer);
        FP.Serialize(&p->TargetDepth, serializer);
        FP.Serialize(&p->Throttle, serializer);
        FP.Serialize(&p->TurnSpeed, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct SubmarineInterior : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 9973;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (SubmarineInterior*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TeamLink : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public TeamRef Team;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20681;
        hash = hash * 31 + (Int32)Team;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TeamLink*)ptr;
        serializer.Stream.Serialize((Int32*)&p->Team);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TelescopeStation : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7823;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TelescopeStation*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TerminalStation : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14939;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TerminalStation*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ThrustStation : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Throttle;
    [FieldOffset(8)]
    public FP ThrottleSpeed;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 1861;
        hash = hash * 31 + Throttle.GetHashCode();
        hash = hash * 31 + ThrottleSpeed.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ThrustStation*)ptr;
        FP.Serialize(&p->Throttle, serializer);
        FP.Serialize(&p->ThrottleSpeed, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Torpedo : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public EntityRef LoadedIn;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19727;
        hash = hash * 31 + LoadedIn.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Torpedo*)ptr;
        EntityRef.Serialize(&p->LoadedIn, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct WeaponFireStation : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public QBoolean CanFire;
    [FieldOffset(4)]
    public QBoolean IsOpen;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8581;
        hash = hash * 31 + CanFire.GetHashCode();
        hash = hash * 31 + IsOpen.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (WeaponFireStation*)ptr;
        QBoolean.Serialize(&p->CanFire, serializer);
        QBoolean.Serialize(&p->IsOpen, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct WeaponLoaderStation : Quantum.IComponent {
    public const Int32 SIZE = 96;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public FP LoadingSpeed;
    [FieldOffset(72)]
    public FPVector3 WeaponRotation;
    [FieldOffset(24)]
    public FPVector3 WeaponPositionFrom;
    [FieldOffset(48)]
    public FPVector3 WeaponPositionTo;
    [FieldOffset(0)]
    public EntityRef CurrentTorpedo;
    [FieldOffset(8)]
    public FP LoadingProgress;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 1123;
        hash = hash * 31 + LoadingSpeed.GetHashCode();
        hash = hash * 31 + WeaponRotation.GetHashCode();
        hash = hash * 31 + WeaponPositionFrom.GetHashCode();
        hash = hash * 31 + WeaponPositionTo.GetHashCode();
        hash = hash * 31 + CurrentTorpedo.GetHashCode();
        hash = hash * 31 + LoadingProgress.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (WeaponLoaderStation*)ptr;
        EntityRef.Serialize(&p->CurrentTorpedo, serializer);
        FP.Serialize(&p->LoadingProgress, serializer);
        FP.Serialize(&p->LoadingSpeed, serializer);
        FPVector3.Serialize(&p->WeaponPositionFrom, serializer);
        FPVector3.Serialize(&p->WeaponPositionTo, serializer);
        FPVector3.Serialize(&p->WeaponRotation, serializer);
    }
  }
  public unsafe partial interface ISignalOnCarry : ISignal {
    void OnCarry(Frame f, EntityRef Item, EntityRef Player);
  }
  public unsafe partial interface ISignalOnDrop : ISignal {
    void OnDrop(Frame f, EntityRef Player);
  }
  public unsafe partial interface ISignalOnPlayerEnterStation : ISignal {
    void OnPlayerEnterStation(Frame f, EntityRef playerEntity, EntityRef stationEntity);
  }
  public unsafe partial interface ISignalOnPlayerLeaveStation : ISignal {
    void OnPlayerLeaveStation(Frame f, EntityRef playerEntity);
  }
  public static unsafe partial class Constants {
  }
  public unsafe partial class Frame {
    private ISignalOnCarry[] _ISignalOnCarrySystems;
    private ISignalOnDrop[] _ISignalOnDropSystems;
    private ISignalOnPlayerEnterStation[] _ISignalOnPlayerEnterStationSystems;
    private ISignalOnPlayerLeaveStation[] _ISignalOnPlayerLeaveStationSystems;
    partial void AllocGen() {
      _globals = (_globals_*)Context.Allocator.AllocAndClear(sizeof(_globals_));
    }
    partial void FreeGen() {
      Context.Allocator.Free(_globals);
    }
    partial void CopyFromGen(Frame frame) {
      Native.Utils.Copy(_globals, frame._globals, sizeof(_globals_));
    }
    partial void InitGen() {
      Initialize(this, this.SimulationConfig.Entities, 256);
      _ISignalOnCarrySystems = BuildSignalsArray<ISignalOnCarry>();
      _ISignalOnDropSystems = BuildSignalsArray<ISignalOnDrop>();
      _ISignalOnPlayerEnterStationSystems = BuildSignalsArray<ISignalOnPlayerEnterStation>();
      _ISignalOnPlayerLeaveStationSystems = BuildSignalsArray<ISignalOnPlayerLeaveStation>();
      _ComponentSignalsOnAdded = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      _ComponentSignalsOnRemoved = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      BuildSignalsArrayOnComponentAdded<Quantum.Carryable>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Carryable>();
      BuildSignalsArrayOnComponentAdded<CharacterController2D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController2D>();
      BuildSignalsArrayOnComponentAdded<CharacterController3D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.Interactable>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Interactable>();
      BuildSignalsArrayOnComponentAdded<Quantum.KCC>();
      BuildSignalsArrayOnComponentRemoved<Quantum.KCC>();
      BuildSignalsArrayOnComponentAdded<Quantum.KCCProcessorLink>();
      BuildSignalsArrayOnComponentRemoved<Quantum.KCCProcessorLink>();
      BuildSignalsArrayOnComponentAdded<MapEntityLink>();
      BuildSignalsArrayOnComponentRemoved<MapEntityLink>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentAdded<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentRemoved<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentAdded<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCallbacks2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCallbacks2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCallbacks3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCallbacks3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsJoints2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsJoints2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsJoints3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsJoints3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.Player>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Player>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerFields>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerFields>();
      BuildSignalsArrayOnComponentAdded<Quantum.Station>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Station>();
      BuildSignalsArrayOnComponentAdded<Quantum.SteerStation>();
      BuildSignalsArrayOnComponentRemoved<Quantum.SteerStation>();
      BuildSignalsArrayOnComponentAdded<Quantum.Submarine>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Submarine>();
      BuildSignalsArrayOnComponentAdded<Quantum.SubmarineInterior>();
      BuildSignalsArrayOnComponentRemoved<Quantum.SubmarineInterior>();
      BuildSignalsArrayOnComponentAdded<Quantum.TeamLink>();
      BuildSignalsArrayOnComponentRemoved<Quantum.TeamLink>();
      BuildSignalsArrayOnComponentAdded<Quantum.TelescopeStation>();
      BuildSignalsArrayOnComponentRemoved<Quantum.TelescopeStation>();
      BuildSignalsArrayOnComponentAdded<Quantum.TerminalStation>();
      BuildSignalsArrayOnComponentRemoved<Quantum.TerminalStation>();
      BuildSignalsArrayOnComponentAdded<Quantum.ThrustStation>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ThrustStation>();
      BuildSignalsArrayOnComponentAdded<Quantum.Torpedo>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Torpedo>();
      BuildSignalsArrayOnComponentAdded<Transform2D>();
      BuildSignalsArrayOnComponentRemoved<Transform2D>();
      BuildSignalsArrayOnComponentAdded<Transform2DVertical>();
      BuildSignalsArrayOnComponentRemoved<Transform2DVertical>();
      BuildSignalsArrayOnComponentAdded<Transform3D>();
      BuildSignalsArrayOnComponentRemoved<Transform3D>();
      BuildSignalsArrayOnComponentAdded<View>();
      BuildSignalsArrayOnComponentRemoved<View>();
      BuildSignalsArrayOnComponentAdded<Quantum.WeaponFireStation>();
      BuildSignalsArrayOnComponentRemoved<Quantum.WeaponFireStation>();
      BuildSignalsArrayOnComponentAdded<Quantum.WeaponLoaderStation>();
      BuildSignalsArrayOnComponentRemoved<Quantum.WeaponLoaderStation>();
    }
    partial void SetPlayerInputCodeGen(PlayerRef player, Input input) {
      if ((int)player >= (int)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      var i = _globals->input.GetPointer(player);
      i->Interact = i->Interact.Update(this.Number, input.Interact);
      i->SecondInteract = i->SecondInteract.Update(this.Number, input.SecondInteract);
      i->Jump = i->Jump.Update(this.Number, input.Jump);
      i->TextInput = input.TextInput;
      i->ThumbSticks = input.ThumbSticks;
    }
    public Input* GetPlayerInput(PlayerRef player) {
      if ((int)player >= (int)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      return _globals->input.GetPointer(player);
    }
    partial void GetPlayerLastConnectionStateCodeGen(ref BitSetRef bitSet) {
      bitSet = new(_globals->PlayerLastConnectionState.Bits, _globals->PlayerLastConnectionState.Length);
    }
    partial void ResetPhysicsCodeGen() {
      if (Context.Physics2D != null && Physics2D.Map != null && Physics2D.Map.Guid.IsDynamic) Physics2D.ResetMap();
      Physics2D.Init(_globals->PhysicsState2D.MapStaticCollidersState.TrackedMap);
      if (Context.Physics3D != null && Physics3D.Map != null && Physics3D.Map.Guid.IsDynamic) Physics3D.ResetMap();
      Physics3D.Init(_globals->PhysicsState3D.MapStaticCollidersState.TrackedMap);
    }
    public unsafe partial struct FrameSignals {
      public void OnCarry(EntityRef Item, EntityRef Player) {
        var array = _f._ISignalOnCarrySystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnCarry(_f, Item, Player);
          }
        }
      }
      public void OnDrop(EntityRef Player) {
        var array = _f._ISignalOnDropSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnDrop(_f, Player);
          }
        }
      }
      public void OnPlayerEnterStation(EntityRef playerEntity, EntityRef stationEntity) {
        var array = _f._ISignalOnPlayerEnterStationSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnPlayerEnterStation(_f, playerEntity, stationEntity);
          }
        }
      }
      public void OnPlayerLeaveStation(EntityRef playerEntity) {
        var array = _f._ISignalOnPlayerLeaveStationSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnPlayerLeaveStation(_f, playerEntity);
          }
        }
      }
    }
  }
  public unsafe partial class Statics {
    public static FrameSerializer.Delegate SerializeKCCCollision;
    public static FrameSerializer.Delegate SerializeKCCIgnore;
    public static FrameSerializer.Delegate SerializeKCCModifier;
    public static FrameSerializer.Delegate SerializeInput;
    static partial void InitStaticDelegatesGen() {
      SerializeKCCCollision = Quantum.KCCCollision.Serialize;
      SerializeKCCIgnore = Quantum.KCCIgnore.Serialize;
      SerializeKCCModifier = Quantum.KCCModifier.Serialize;
      SerializeInput = Quantum.Input.Serialize;
    }
    static partial void RegisterSimulationTypesGen(TypeRegistry typeRegistry) {
      typeRegistry.Register(typeof(AssetGuid), AssetGuid.SIZE);
      typeRegistry.Register(typeof(AssetRef), AssetRef.SIZE);
      typeRegistry.Register(typeof(Quantum.BasePlayerInput), Quantum.BasePlayerInput.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet1024), Quantum.BitSet1024.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet128), Quantum.BitSet128.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet2048), Quantum.BitSet2048.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet256), Quantum.BitSet256.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet4096), Quantum.BitSet4096.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet512), Quantum.BitSet512.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet6), Quantum.BitSet6.SIZE);
      typeRegistry.Register(typeof(Button), Button.SIZE);
      typeRegistry.Register(typeof(CallbackFlags), 4);
      typeRegistry.Register(typeof(Quantum.Carryable), Quantum.Carryable.SIZE);
      typeRegistry.Register(typeof(CharacterController2D), CharacterController2D.SIZE);
      typeRegistry.Register(typeof(CharacterController3D), CharacterController3D.SIZE);
      typeRegistry.Register(typeof(ColorRGBA), ColorRGBA.SIZE);
      typeRegistry.Register(typeof(ComponentPrototypeRef), ComponentPrototypeRef.SIZE);
      typeRegistry.Register(typeof(ComponentTypeRef), ComponentTypeRef.SIZE);
      typeRegistry.Register(typeof(DistanceJoint), DistanceJoint.SIZE);
      typeRegistry.Register(typeof(DistanceJoint3D), DistanceJoint3D.SIZE);
      typeRegistry.Register(typeof(Quantum.EKCCCollisionSource), 1);
      typeRegistry.Register(typeof(Quantum.EKCCIgnoreSource), 1);
      typeRegistry.Register(typeof(Quantum.EKCCProcessorSource), 1);
      typeRegistry.Register(typeof(EntityPrototypeRef), EntityPrototypeRef.SIZE);
      typeRegistry.Register(typeof(EntityRef), EntityRef.SIZE);
      typeRegistry.Register(typeof(FP), FP.SIZE);
      typeRegistry.Register(typeof(FPBounds2), FPBounds2.SIZE);
      typeRegistry.Register(typeof(FPBounds3), FPBounds3.SIZE);
      typeRegistry.Register(typeof(FPMatrix2x2), FPMatrix2x2.SIZE);
      typeRegistry.Register(typeof(FPMatrix3x3), FPMatrix3x3.SIZE);
      typeRegistry.Register(typeof(FPMatrix4x4), FPMatrix4x4.SIZE);
      typeRegistry.Register(typeof(FPQuaternion), FPQuaternion.SIZE);
      typeRegistry.Register(typeof(FPVector2), FPVector2.SIZE);
      typeRegistry.Register(typeof(FPVector3), FPVector3.SIZE);
      typeRegistry.Register(typeof(FrameMetaData), FrameMetaData.SIZE);
      typeRegistry.Register(typeof(FrameTimer), FrameTimer.SIZE);
      typeRegistry.Register(typeof(HingeJoint), HingeJoint.SIZE);
      typeRegistry.Register(typeof(HingeJoint3D), HingeJoint3D.SIZE);
      typeRegistry.Register(typeof(Hit), Hit.SIZE);
      typeRegistry.Register(typeof(Hit3D), Hit3D.SIZE);
      typeRegistry.Register(typeof(Quantum.Input), Quantum.Input.SIZE);
      typeRegistry.Register(typeof(Quantum.InputButtons), 4);
      typeRegistry.Register(typeof(InputDirection), InputDirection.SIZE);
      typeRegistry.Register(typeof(InputDirectionMagnitude), InputDirectionMagnitude.SIZE);
      typeRegistry.Register(typeof(InputPitchYaw), InputPitchYaw.SIZE);
      typeRegistry.Register(typeof(IntVector2), IntVector2.SIZE);
      typeRegistry.Register(typeof(IntVector3), IntVector3.SIZE);
      typeRegistry.Register(typeof(Quantum.Interactable), Quantum.Interactable.SIZE);
      typeRegistry.Register(typeof(Joint), Joint.SIZE);
      typeRegistry.Register(typeof(Joint3D), Joint3D.SIZE);
      typeRegistry.Register(typeof(Quantum.KCC), Quantum.KCC.SIZE);
      typeRegistry.Register(typeof(Quantum.KCCCollision), Quantum.KCCCollision.SIZE);
      typeRegistry.Register(typeof(Quantum.KCCData), Quantum.KCCData.SIZE);
      typeRegistry.Register(typeof(Quantum.KCCIgnore), Quantum.KCCIgnore.SIZE);
      typeRegistry.Register(typeof(Quantum.KCCModifier), Quantum.KCCModifier.SIZE);
      typeRegistry.Register(typeof(Quantum.KCCProcessorLink), Quantum.KCCProcessorLink.SIZE);
      typeRegistry.Register(typeof(LayerMask), LayerMask.SIZE);
      typeRegistry.Register(typeof(MapEntityId), MapEntityId.SIZE);
      typeRegistry.Register(typeof(MapEntityLink), MapEntityLink.SIZE);
      typeRegistry.Register(typeof(NavMeshAvoidanceAgent), NavMeshAvoidanceAgent.SIZE);
      typeRegistry.Register(typeof(NavMeshAvoidanceObstacle), NavMeshAvoidanceObstacle.SIZE);
      typeRegistry.Register(typeof(NavMeshPathfinder), NavMeshPathfinder.SIZE);
      typeRegistry.Register(typeof(NavMeshRegionMask), NavMeshRegionMask.SIZE);
      typeRegistry.Register(typeof(NavMeshSteeringAgent), NavMeshSteeringAgent.SIZE);
      typeRegistry.Register(typeof(NullableFP), NullableFP.SIZE);
      typeRegistry.Register(typeof(NullableFPVector2), NullableFPVector2.SIZE);
      typeRegistry.Register(typeof(NullableFPVector3), NullableFPVector3.SIZE);
      typeRegistry.Register(typeof(NullableNonNegativeFP), NullableNonNegativeFP.SIZE);
      typeRegistry.Register(typeof(PhysicsBody2D), PhysicsBody2D.SIZE);
      typeRegistry.Register(typeof(PhysicsBody3D), PhysicsBody3D.SIZE);
      typeRegistry.Register(typeof(PhysicsCallbacks2D), PhysicsCallbacks2D.SIZE);
      typeRegistry.Register(typeof(PhysicsCallbacks3D), PhysicsCallbacks3D.SIZE);
      typeRegistry.Register(typeof(PhysicsCollider2D), PhysicsCollider2D.SIZE);
      typeRegistry.Register(typeof(PhysicsCollider3D), PhysicsCollider3D.SIZE);
      typeRegistry.Register(typeof(PhysicsEngineState), PhysicsEngineState.SIZE);
      typeRegistry.Register(typeof(PhysicsJoints2D), PhysicsJoints2D.SIZE);
      typeRegistry.Register(typeof(PhysicsJoints3D), PhysicsJoints3D.SIZE);
      typeRegistry.Register(typeof(PhysicsQueryRef), PhysicsQueryRef.SIZE);
      typeRegistry.Register(typeof(PhysicsSceneSettings), PhysicsSceneSettings.SIZE);
      typeRegistry.Register(typeof(Quantum.Player), Quantum.Player.SIZE);
      typeRegistry.Register(typeof(Quantum.PlayerFields), Quantum.PlayerFields.SIZE);
      typeRegistry.Register(typeof(PlayerRef), PlayerRef.SIZE);
      typeRegistry.Register(typeof(Ptr), Ptr.SIZE);
      typeRegistry.Register(typeof(QBoolean), QBoolean.SIZE);
      typeRegistry.Register(typeof(Quantum.Ptr), Quantum.Ptr.SIZE);
      typeRegistry.Register(typeof(Quantum.QuantumHighresThumbSticks), Quantum.QuantumHighresThumbSticks.SIZE);
      typeRegistry.Register(typeof(Quantum.QuantumRegularThumbSticks), Quantum.QuantumRegularThumbSticks.SIZE);
      typeRegistry.Register(typeof(Quantum.QuantumThumbSticks), Quantum.QuantumThumbSticks.SIZE);
      typeRegistry.Register(typeof(QueryOptions), 2);
      typeRegistry.Register(typeof(RNGSession), RNGSession.SIZE);
      typeRegistry.Register(typeof(Shape2D), Shape2D.SIZE);
      typeRegistry.Register(typeof(Shape3D), Shape3D.SIZE);
      typeRegistry.Register(typeof(SpringJoint), SpringJoint.SIZE);
      typeRegistry.Register(typeof(SpringJoint3D), SpringJoint3D.SIZE);
      typeRegistry.Register(typeof(Quantum.Station), Quantum.Station.SIZE);
      typeRegistry.Register(typeof(Quantum.SteerStation), Quantum.SteerStation.SIZE);
      typeRegistry.Register(typeof(Quantum.Submarine), Quantum.Submarine.SIZE);
      typeRegistry.Register(typeof(Quantum.SubmarineInterior), Quantum.SubmarineInterior.SIZE);
      typeRegistry.Register(typeof(Quantum.TeamLink), Quantum.TeamLink.SIZE);
      typeRegistry.Register(typeof(Quantum.TeamRef), 4);
      typeRegistry.Register(typeof(Quantum.TelescopeStation), Quantum.TelescopeStation.SIZE);
      typeRegistry.Register(typeof(Quantum.TerminalStation), Quantum.TerminalStation.SIZE);
      typeRegistry.Register(typeof(Quantum.ThrustStation), Quantum.ThrustStation.SIZE);
      typeRegistry.Register(typeof(Quantum.Torpedo), Quantum.Torpedo.SIZE);
      typeRegistry.Register(typeof(Transform2D), Transform2D.SIZE);
      typeRegistry.Register(typeof(Transform2DVertical), Transform2DVertical.SIZE);
      typeRegistry.Register(typeof(Transform3D), Transform3D.SIZE);
      typeRegistry.Register(typeof(View), View.SIZE);
      typeRegistry.Register(typeof(Quantum.WeaponFireStation), Quantum.WeaponFireStation.SIZE);
      typeRegistry.Register(typeof(Quantum.WeaponLoaderStation), Quantum.WeaponLoaderStation.SIZE);
      typeRegistry.Register(typeof(Quantum._globals_), Quantum._globals_.SIZE);
    }
    static partial void InitComponentTypeIdGen() {
      ComponentTypeId.Reset(ComponentTypeId.BuiltInComponentCount + 17)
        .AddBuiltInComponents()
        .Add<Quantum.Carryable>(Quantum.Carryable.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Interactable>(Quantum.Interactable.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.KCC>(Quantum.KCC.Serialize, null, Quantum.KCC.OnRemoved, ComponentFlags.None)
        .Add<Quantum.KCCProcessorLink>(Quantum.KCCProcessorLink.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Player>(Quantum.Player.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.PlayerFields>(Quantum.PlayerFields.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Station>(Quantum.Station.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.SteerStation>(Quantum.SteerStation.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Submarine>(Quantum.Submarine.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.SubmarineInterior>(Quantum.SubmarineInterior.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.TeamLink>(Quantum.TeamLink.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.TelescopeStation>(Quantum.TelescopeStation.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.TerminalStation>(Quantum.TerminalStation.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ThrustStation>(Quantum.ThrustStation.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Torpedo>(Quantum.Torpedo.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.WeaponFireStation>(Quantum.WeaponFireStation.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.WeaponLoaderStation>(Quantum.WeaponLoaderStation.Serialize, null, null, ComponentFlags.None)
        .Finish();
    }
    [Preserve()]
    public static void EnsureNotStrippedGen() {
      FramePrinter.EnsureNotStripped();
      FramePrinter.EnsurePrimitiveNotStripped<CallbackFlags>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EKCCCollisionSource>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EKCCIgnoreSource>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EKCCProcessorSource>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputButtons>();
      FramePrinter.EnsurePrimitiveNotStripped<QueryOptions>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.TeamRef>();
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
